name: AzureLoginSample

on: [push]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          enable-AzPSSession: true

      - name: Azure PowerShell Action
        uses: Azure/powershell@v1
        with:
          inlineScript: |
            Get-AzResourceGroup
           
            # Parameters - fill these in before running the script!
            # =====================================================
            
            $workspaceName = "Dev-Fabric-workpace"      # The name of the workspace
            $commitMessage = "Saving the Data to GitHub"      # The commit message

            echo $workspaceName
            echo $commitMessage
            # End Parameters =======================================
            
            $global:baseUrl = "https://api.fabric.microsoft.com/v1" # Replace with environment-specific base URL. For example: "https://api.fabric.microsoft.com/v1"
            
            $global:resourceUrl = "https://api.fabric.microsoft.com"
            
            $global:fabricHeaders = @{}
            
            function SetFabricHeaders() {
            
                #Login to Azure
                #Connect-AzAccount | Out-Null
            
                # Get authentication
                #$fabricToken = (Get-AzAccessToken -ResourceUrl $global:resourceUrl).Token
                #$fabricToken = (Get-AzAccessToken).Token
            	  echo $fabricToken
                $global:fabricHeaders = @{
                    'Content-Type' = "application/json"
                    'Authorization' = "Bearer {0}" -f '${{ secrets.FABRIC_TOKEN }}'
                }
            }
            
            function GetWorkspaceByName($workspaceName) {
                # Get workspaces    
                $getWorkspacesUrl = "{0}/workspaces" -f $global:baseUrl
                $workspaces = (Invoke-RestMethod -Headers $global:fabricHeaders -Uri $getWorkspacesUrl -Method GET).value
            
                # Try to find the workspace by display name
                $workspace = $workspaces | Where-Object {$_.DisplayName -eq $workspaceName}
            
                return $workspace
            }
            
            function GetErrorResponse($exception) {
                # Relevant only for PowerShell Core
                $errorResponse = $_.ErrorDetails.Message
            
                if(!$errorResponse) {
                    # This is needed to support Windows PowerShell
                    $result = $exception.Response.GetResponseStream()
                    $reader = New-Object System.IO.StreamReader($result)
                    $reader.BaseStream.Position = 0
                    $reader.DiscardBufferedData()
                    $errorResponse = $reader.ReadToEnd();
                }
            
                return $errorResponse
            }
            
            try {
                SetFabricHeaders
            
                $workspace = GetWorkspaceByName $workspaceName 
                
                # Verify the existence of the requested workspace
            	if(!$workspace) {
            	  Write-Host "A workspace with the requested name was not found." -ForegroundColor Red
            	  return
            	}
            	
                # Commit to Git
                Write-Host "Committing all changes from workspace '$workspaceName' to Git."
            
                $commitToGitUrl = "{0}/workspaces/{1}/git/commitToGit" -f $global:baseUrl, $workspace.Id
            
                $commitToGitBody = @{ 		
                    mode = "All"
                    comment = $commitMessage
                } | ConvertTo-Json
            
                $commitToGitResponse = Invoke-WebRequest -Headers $global:fabricHeaders -Uri $commitToGitUrl -Method POST -Body $commitToGitBody
            
                $operationId = $commitToGitResponse.Headers['x-ms-operation-id']
                $retryAfter = $commitToGitResponse.Headers['Retry-After']
                Write-Host "Long Running Operation ID: '$operationId' has been scheduled for committing changes from workspace '$workspaceName' to Git with a retry-after time of '$retryAfter' seconds." -ForegroundColor Green
            
            } catch {
                $errorResponse = GetErrorResponse($_.Exception)
                Write-Host "Failed to commit changes from workspace '$workspaceName' to Git. Error reponse: $errorResponse" -ForegroundColor Red
            }            
            
            
          azPSVersion: "latest"       
            
