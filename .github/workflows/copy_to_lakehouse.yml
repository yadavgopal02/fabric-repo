name: Fabric API Call

on:
  push:
    branches:
      - main
    path:
      - cp_fabric_lakehouse/**
    paths-ignore:
      - .github/**
      - dest/**
      - deploy/**
      
jobs:
  call_api:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Azure Login
      env:
        AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
        AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      run: |
        az login --username $AZURE_USERNAME --password $AZURE_PASSWORD

        $tenantId = '55ea6196-70b9-4411-92f5-04a54791f120'                                                #Get from the Azure Portal
        $workspaceGUID = '0fde94f2-391e-42c0-bc8c-f29f17cac5f6'                                           #Get from Power BI URL
        $lakehouseGUID = '958077ec-bae1-4bda-b9a2-2116158d5879'                                           #Get from Power BI URL
        
        $localFolderPath = ''                                         #Local file path always end with /
        $localFiles = @('Samplecsvdata.csv')                                           #Remove all files for entire folder - @(). #Otherwise list files out - @('File1.csv', 'File2.txt', 'File3.pdf')
        $uploadFolderPath = '/Files/test/'                                 #Leave '/Files/' for root folder, always end with /
        
        ###############################################################################################################################################################################
        
        #Connect-AzAccount -TenantId $tenantId | out-null
        az login --username "gopal.yadav@stratacent.com" --password 'F2afgchgrf@Strata'
        $ctx = New-AzStorageContext -StorageAccountName 'onelake' -UseConnectedAccount -endpoint 'fabric.microsoft.com' 
        #Context is needed to upload to Onelake and not Data Lake
        
        $Count = $localFiles.Count
        if ($Count -eq 0)                       #If there were no files provided, upload entire folder
        {
           $Files = Get-ChildItem -Path $localFolderPath
            foreach ($f in $Files) 
            {
                  $uploadPath = $lakehouseGUID + $uploadFolderPath + $f
                  $localPath = $localFolderPath + $f
                  New-AzDataLakeGen2Item -Context $ctx -FileSystem $workspaceGUID -Path $uploadPath -Source $localPath -Force | out-null
                  $TextOutput = "Uploading " + $f
                  Write-Output $TextOutput
            }    
        
        }
        else                                    #If there were files provided, upload those files
        {   
            foreach ($f in $localFiles)
            {
                    $uploadPath = $lakehouseGUID + $uploadFolderPath + $f
                    $localPath = $localFolderPath + $f
                    New-AzDataLakeGen2Item -Context $ctx -FileSystem $workspaceGUID -Path $uploadPath -Source $localPath -Force | out-null
                    $TextOutput = "Uploading " + $f
                    Write-Output $TextOutput
            }
        }
        #=============
